import streamlit as st
import pandas as pd
import plotly.express as px
from fpdf import FPDF
from datetime import datetime
from io import BytesIO
from blend_calculator import BlendCalculator

# === Dados fixos ===

FATTY_ACID_PROFILES = {
    "√ìleos Refinados": {
        "Palm Oil": {"C12:0": 0.2, "C14:0": 1.0, "C16:0": 44.0, "C16:1": 0.2, "C18:0": 4.5, "C18:1": 39.0, "C18:2": 10.0, "C18:3": 0.3, "C20:0": 0.2, "C20:1": 0.1},
        "Palm Olein": {"C12:0": 0.1, "C14:0": 1.0, "C16:0": 39.0, "C16:1": 0.2, "C18:0": 4.5, "C18:1": 43.5, "C18:2": 11.0, "C18:3": 0.3, "C20:0": 0.2, "C20:1": 0.2},
        "Palm Stearin": {"C14:0": 1.2, "C16:0": 56.0, "C16:1": 0.1, "C18:0": 6.5, "C18:1": 30.0, "C18:2": 5.0, "C18:3": 0.1, "C20:0": 0.3},
        "Palm Kernel Oil": {"C6:0": 0.2, "C8:0": 3.6, "C10:0": 3.5, "C12:0": 48.2, "C14:0": 16.2, "C16:0": 8.4, "C16:1": 0.1, "C18:0": 2.0, "C18:1": 15.3, "C18:2": 2.3, "C18:3": 0.1, "C20:0": 0.1},
        "Palm Kernel Olein": {"C6:0": 0.3, "C8:0": 4.0, "C10:0": 3.7, "C12:0": 49.5, "C14:0": 15.7, "C16:0": 8.0, "C16:1": 0.1, "C18:0": 1.9, "C18:1": 14.5, "C18:2": 2.1, "C18:3": 0.1, "C20:0": 0.1},
        "Palm Kernel Stearin": {"C8:0": 3.0, "C10:0": 3.0, "C12:0": 47.0, "C14:0": 17.5, "C16:0": 9.5, "C16:1": 0.1, "C18:0": 2.5, "C18:1": 14.0, "C18:2": 2.0, "C18:3": 0.1, "C20:0": 0.1}
    },

    "√Åcidos Graxos Puros": {
        "√Åcido L√°urico (C12:0)": {"C12:0": 100.0},
        "√Åcido Mir√≠stico (C14:0)": {"C14:0": 100.0},
        "√Åcido Palm√≠tico (C16:0)": {"C16:0": 100.0},
        "√Åcido Este√°rico (C18:0)": {"C18:0": 100.0},
        "√Åcido Oleico (C18:1)": {"C18:1": 100.0},
        "√Åcido Linoleico (C18:2)": {"C18:2": 100.0},
        "√Åcido Linol√™nico (C18:3)": {"C18:3": 100.0}
    },
    
    "Insumos Industriais": {
        "PFAD (Destilado de √Åcidos Graxos de Palma)": {"C16:0": 52.0, "C18:0": 5.0, "C18:1": 34.0, "C18:2": 8.0, "C20:0": 1.0},
        "Soapstock de Palma (Refino Qu√≠mico)": {"C16:0": 38.0, "C18:0": 3.5, "C18:1": 45.0, "C18:2": 11.0, "C18:3": 1.0}
    }
}

nomes_acidos = {
    "C6:0": "√Åcido Capr√≥ico", "C8:0": "√Åcido Capr√≠lico", "C10:0": "√Åcido C√°prico",
    "C12:0": "√Åcido L√°urico", "C14:0": "√Åcido Mir√≠stico", "C16:0": "√Åcido Palm√≠tico",
    "C16:1": "√Åcido Palmitoleico", "C18:0": "√Åcido Este√°rico", "C18:1": "√Åcido Oleico",
    "C18:2": "√Åcido Linoleico", "C18:3": "√Åcido Linol√™nico", "C20:0": "√Åcido Araqu√≠dico",
    "C20:1": "√Åcido Gadoleico"
}

perfils_volateis = {
    "Palm Oil": {
        "2,2,6-Trimethylcyclohexanone": ("Palmeira", 35),
        "3,3,5-Trimethylcyclohex-2-enone": ("Palmeira", 25),
        "Nonanone": ("Doce", 15),
        "Nonanal": ("Doce", 15),
        "Linalol": ("Floral", 5),
        "Trans-allo-ocimene": ("Fresca", 3),
        "Œ≤-Cyclocitral": ("C√≠trica", 2),
        "Ionol": ("Floral", 5),
    },
    "Palm Olein": {
        "Heptanal": ("Fresca, frutada", 30),
        "Trans-2-heptenal": ("Verde", 20),
        "Decanal": ("Doce", 25),
        "Trans-2-undecenal": ("Doce", 25),
    },
    "Palm Stearin": {
        "√Åcido ac√©tico": ("Azeda", 30),
        "√Åcido butanoico": ("L√°ctea", 25),
        "1-Hexanol": ("Verde", 20),
        "Metilcetona": ("Frutada", 25),
    },
    "Palm Kernel Oil": {
        "2-Nonanona": ("Doce", 40),
        "√Åcido octanoico": ("Gordurosa", 20),
        "Metil octanoato": ("Doce", 20),
        "Pirazinas": ("Tostadas, amadeiradas", 10),
        "Maltol": ("Doce", 5),
    },
    "Palm Kernel Olein": {
        "2-Nonanona": ("Doce", 40),
        "√Åcido octanoico": ("Gordurosa", 20),
        "Metil octanoato": ("Doce", 20),
        "Pirazinas": ("Tostadas, amadeiradas", 10),
        "Maltol": ("Doce", 5),
    },
    "Palm Kernel Stearin": {
        "Pirazinas": ("Tostadas, amadeiradas", 40),
        "Maltol": ("Doce", 30),
        "√Åcido benzoico etil √©ster": ("Doce", 20),
        "√Åcido octanoico": ("Gordurosa", 10),
    },
    "PFAD": {
        "√Åcido palm√≠tico": ("Gorduroso, ceroso", 35),
        "√Åcido oleico": ("Oleoso, suave", 20),
        "√Åcido linoleico": ("Leve amendoado", 12),
        "Hexanal": ("Notas verdes, herbais", 8),
        "Acetona": ("Notas qu√≠micas, solvente", 8),
        "Compostos sulfurados": ("Pungente, caracter√≠stico", 5),
        "√Åcido l√°urico": ("Levemente doce", 5),
    },
    "Soapstock": {
        "√Åcido palm√≠tico": ("Oleoso, gorduroso", 23),
        "√Åcido oleico": ("Suave, oleoso", 18),
        "Sab√µes de pot√°ssio/s√≥dio": ("Sab√£o, alcalino", 15),
        "Fosfolip√≠dios oxidados": ("Mineral, rancidez leve", 12),
        "√Åcido linoleico": ("Verde, vegetal", 7),
        "Compostos fen√≥licos": ("Amargo, terroso", 5),
        "√Ågua e tra√ßos org√¢nicos": ("Neutro", 5),
    },
    "√Åcido Oleico": {
        "Octanal": ("C√≠trico, doce", 30),
        "Nonanal": ("Floral, ceroso", 25),
        "Decanal": ("Alaranjado, doce", 20),
        "√Åcido hexanoico": ("Gorduroso, ran√ßoso", 15),
        "1-Octeno-3-ol": ("Terroso, cogumelo", 10),
    },
    "√Åcido Linoleico": {
        "Hexanal": ("Verde, herb√°ceo", 35),
        "2-Pentilfurano": ("Amendoado, torrado", 25),
        "1-Octeno-3-ol": ("Terroso", 15),
        "Nonanal": ("Floral, gorduroso", 15),
        "√Åcido 2,4-decadienoico": ("Rancidez caracter√≠stica", 10),
    },
    "√Åcido Palm√≠tico": {
        "√Åcido hexanoico": ("Gorduroso", 40),
        "Nonanal": ("C√≠trico, ceroso", 30),
        "Octanal": ("C√≠trico", 20),
        "Compostos alif√°ticos": ("Neutro", 10),
    },
    "√Åcido Este√°rico": {
        "Nonanal": ("Ceroso", 35),
        "Octanal": ("C√≠trico", 25),
        "Decanal": ("Doce, frutado", 20),
        "√Åcido butanoico": ("L√°cteo", 10),
        "√Åcido hexanoico": ("Rancidez leve", 10),
    },
    "√Åcido L√°urico": {
        "√Åcido butanoico": ("L√°cteo", 30),
        "Decanal": ("Doce", 25),
        "Dodecanol": ("Gorduroso", 25),
        "Octanal": ("Fresco, c√≠trico", 20),
    },
    "√Åcido Mir√≠stico": {
        "Tetradecanol": ("Gorduroso", 35),
        "Nonanal": ("Ceroso", 30),
        "Octanal": ("C√≠trico", 20),
        "√Åcido hexanoico": ("Rancidez leve", 15),
    },
    "√Åcido Capr√≥ico": {
        "√Åcido hexanoico": ("Gorduroso, ran√ßoso", 40),
        "Butirato de etila": ("Frutado", 30),
        "Hexanoato de etila": ("Frutado, doce", 20),
        "Butanoato de metila": ("Frutado", 10),
    },
    "√Åcido Capr√≠lico": {
        "√Åcido octanoico": ("Gorduroso, ran√ßoso", 40),
        "Octanol": ("Fresco, verde", 30),
        "Octanal": ("C√≠trico", 20),
        "Compostos l√°cteos": ("L√°cteo", 10),
    }
}

referencias = {
    "Palm Oil": "Kuntum et al. (1989), *Journal of Oil Palm Research*.",
    "Palm Olein": "Omar et al. (2007), *Pakistan Journal of Biological Sciences*.",
    "Palm Stearin": "Omar et al. (2007), *Pakistan Journal of Biological Sciences*.",
    "Palm Kernel Oil": "Zhang et al. (2016), *Food Research International*.",
    "Palm Kernel Olein": "Zhang et al. (2016), *Food Research International*.",
    "Palm Kernel Stearin": "Zhang et al. (2016), *Food Research International*.",
    "PFAD": "Tan et al. (2018), *Journal of Lipid Science & Technology*.",
    "Soapstock": "Lim et al. (2019), *Industrial Crops and Products*.",
    "√Åcido Oleico": "Yang et al. (2020), *Molecules*.",
    "√Åcido Linoleico": "Delgado et al. (2015), *Food Chemistry*.",
    "√Åcido Palm√≠tico": "L√≥pez-L√≥pez et al. (2010), *Journal of the American Oil Chemists‚Äô Society*.",
    "√Åcido Este√°rico": "Zhang et al. (2021), *Food Science & Nutrition*.",
    "√Åcido L√°urico": "Grosch et al. (1981), *Journal of the American Oil Chemists‚Äô Society*.",
    "√Åcido Mir√≠stico": "Reineccius (2006), *Flavor Chemistry and Technology*.",
    "√Åcido Capr√≥ico": "Van Gemert (2011), *Compilations of Odour Threshold Values*.",
    "√Åcido Capr√≠lico": "Van Gemert (2011), *Compilations of Odour Threshold Values*."
}

# === Fun√ß√µes auxiliares ===
def gerar_receita_lipidica(blend):
    df = pd.DataFrame.from_dict(blend, orient='index', columns=['%'])
    df.index.name = '√Åcido Graxo'
    df = df.reset_index()
    df['Nome Completo'] = df['√Åcido Graxo'].apply(lambda x: f"{nomes_acidos.get(x, x)} ({x})")
    return df

def gerar_pdf(df_lipidica, sensorial_txt):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.set_text_color(33, 37, 41)

    # T√≠tulo
    pdf.set_font("Arial", 'B', size=16)
    pdf.cell(200, 10, txt="Relat√≥rio LipidGenesis", ln=True, align='C')
    pdf.set_font("Arial", size=12)
    pdf.ln(10)

    # Data
    pdf.cell(200, 10, txt="Data: " + datetime.now().strftime('%d/%m/%Y %H:%M'), ln=True, align='L')
    pdf.ln(10)

    # Receita Lip√≠dica
    pdf.set_font("Arial", 'B', size=14)
    pdf.cell(200, 10, txt="Receita Lip√≠dica", ln=True)
    pdf.set_font("Arial", size=12)
    for _, row in df_lipidica.iterrows():
        nome = f"{row['Nome Completo']}"
        pdf.cell(200, 10, txt=f"{nome}: {row['%']:.2f}%", ln=True)

    pdf.ln(10)

    # Exporta para BytesIO com a codifica√ß√£o correta
    buffer = BytesIO()
    pdf_output = pdf.output(dest='S').encode('latin1')
    buffer.write(pdf_output)
    buffer.seek(0)
    return buffer

st.set_page_config(
    page_title="LipidGenesis - Blend LG",
    layout="wide"
)

# === T√≠tulo e Slogan (fora das abas) ===
st.title("üå¥ OGT LipidPalma - Bioengenharia Lip√≠dica Aplicada √† Ind√∫stria de √ìleo de Palma")

# === Interface em Abas (logo abaixo do slogan) ===
tabs = st.tabs([
    "üß≠ Home",                     # tabs[0]
    "üè≠ Proposta Industrial",      # tabs[1]
    "üß™ Blend Lip√≠dico",           # tabs[2]
    "üëÉ Assinatura Sensorial",     # tabs[3]
    "üìä Viabilidade T√©cnica",      # tabs[4]
    "üìä Protocolo de Produ√ß√£o",    # tabs[5]
    "üå± ESG e Ambiental",          # tabs[6]
    "üìç Rastreabilidade",          # tabs[7]
    "üìÑ Exporta√ß√£o PDF"            # tabs[8]
])

with tabs[0]:
    st.markdown("""
    ***OGT ‚Äì The Future of Oil Disruption*** 
    **Apresenta:** 
    
    ### üå¥ LipidPalma‚Ñ¢

    ---

    Um app interativo para formula√ß√£o e simula√ß√£o de blends lip√≠dicos com foco na cadeia do √≥leo de palma.

    O **LipidPalma** √© um produto da marca **LipidGenesis**, uma linha modular de solu√ß√µes da **OGT** para impulsionar a inova√ß√£o e a sustentabilidade em √≥leos vegetais como palma, soja e algod√£o.

    ---

    Para come√ßar:
    1. Acesse a aba **"Blend Lip√≠dico"** e monte sua formula√ß√£o com os ingredientes dispon√≠veis.
    2. Explore as demais abas para entender o perfil f√≠sico-qu√≠mico, sensorial, ambiental e produtivo do seu blend.

    ---
    
    Este MVP √© voltado para inova√ß√£o sustent√°vel em P&D, com foco em alternativas ao refino tradicional.
    """)

with tabs[1]:
    st.markdown("""
    O **LipidPalma** prop√µe uma abordagem alternativa √† produ√ß√£o tradicional de √≥leos estruturados,
    utilizando **esterifica√ß√£o enzim√°tica com glicerol** para gerar triglicer√≠deos com perfis sob medida.

    ---
    ### **Categorias de ingredientes dispon√≠veis**
    - **√ìleos Refinados:** produtos oriundos do refino tradicional.
    - **√Åcidos Graxos Puros:** fornecem controle t√©cnico preciso da composi√ß√£o.
    - **Insumos Industriais (ex: PFAD, soapstock):** alternativas econ√¥micas e sustent√°veis provenientes de etapas do refino.

    ---
    ### **Vantagens estrat√©gicas**
    - **Customiza√ß√£o de blends** com perfis semelhantes a √≥leos vegetais reais.
    - **Valoriza√ß√£o de subprodutos industriais**, reduzindo custos e impactos ambientais.
    - **Flexibilidade para P&D** em aplica√ß√µes cosm√©ticas, alimentares ou industriais.

    ---
    ### **Objetivo do MVP**
    Demonstrar a viabilidade t√©cnica e econ√¥mica de produzir √≥leos estruturados por rota enzim√°tica
    a partir de misturas controladas de √≥leos refinados, insumos industriais e √°cidos graxos puros, promovendo inova√ß√£o e circularidade na cadeia do √≥leo de palma.
    """)

# === Blend Lip√≠dico ===
with tabs[2]:
    st.header("üß™ Montagem do Blend LG")
    st.sidebar.title("üî¨ Monte seu Blend")

    # Agrupamento visual dos ingredientes
    grouped_profiles = {
        "√ìleos Refinados": list(FATTY_ACID_PROFILES["√ìleos Refinados"].keys()),
        "√Åcidos Graxos Puros": list(FATTY_ACID_PROFILES["√Åcidos Graxos Puros"].keys()),
        "Insumos Industriais": list(FATTY_ACID_PROFILES["Insumos Industriais"].keys())
    }

    # Sliders para cada categoria
    oil_percentages = {}

    st.sidebar.markdown("### üß¥ √ìleos Refinados")
    for oil in grouped_profiles["√ìleos Refinados"]:
        oil_percentages[oil] = st.sidebar.slider(f"{oil} (%)", 0, 100, 0, 1)

    st.sidebar.markdown("### üß¨ √Åcidos Graxos Puros")
    for oil in grouped_profiles["√Åcidos Graxos Puros"]:
        oil_percentages[oil] = st.sidebar.slider(f"{oil} (%)", 0, 100, 0, 1)

    st.sidebar.markdown("### üß™ Insumos Industriais")
    for oil in grouped_profiles["Insumos Industriais"]:
        oil_percentages[oil] = st.sidebar.slider(f"{oil} (%)", 0, 100, 0, 1)

    # Salva os percentuais brutos no session_state
    st.session_state["oil_percentages"] = oil_percentages

    total_pct = sum(oil_percentages.values())

    if total_pct == 0:
        st.warning("Defina pelo menos um √≥leo com percentual maior que 0.")
    else:
        # Normaliza√ß√£o
        normalized = {
            oil: pct / total_pct
            for oil, pct in oil_percentages.items()
            if pct > 0
        }

        # Fun√ß√£o para buscar perfil do √≥leo em qualquer categoria
        def get_fatty_profile(oil):
            for category in FATTY_ACID_PROFILES:
                if oil in FATTY_ACID_PROFILES[category]:
                    return FATTY_ACID_PROFILES[category][oil]
            return {}

        # Uni√£o de todos os √°cidos graxos presentes
        all_fatty_acids = set().union(
            *[get_fatty_profile(oil) for oil in normalized.keys()]
        )

        # Gera√ß√£o do blend lip√≠dico
        blend_lg = {
            fa: sum(
                normalized[oil] * get_fatty_profile(oil).get(fa, 0)
                for oil in normalized
            )
            for fa in all_fatty_acids
        }

        # Salva no session_state
        st.session_state["blend_lipidico"] = blend_lg
        st.session_state["blend_result"] = blend_lg  # Necess√°rio para produ√ß√£o

        # Visualiza√ß√£o em tabela
        df_lipidico = gerar_receita_lipidica(blend_lg)
        st.dataframe(df_lipidico)

        # Gr√°fico de barras
        st.subheader("üìä Perfil de √Åcidos Graxos")
        fig = px.bar(df_lipidico, x="Nome Completo", y="%", template="plotly_dark")
        st.plotly_chart(fig, use_container_width=True)

        # Par√¢metros f√≠sico-qu√≠micos
        valores_iodo = {"C18:1": 86, "C18:2": 173, "C18:3": 260}
        valores_saponificacao = {
            "C6:0": 325, "C8:0": 305, "C10:0": 295, "C12:0": 276, "C14:0": 255,
            "C16:0": 241, "C18:0": 222, "C18:1": 198, "C18:2": 195, "C18:3": 190
        }
        valores_ponto_fusao = {
            "C6:0": -3, "C8:0": 16, "C10:0": 31, "C12:0": 44, "C14:0": 53,
            "C16:0": 63, "C18:0": 70, "C18:1": 13, "C18:2": -5, "C18:3": -11
        }

        # C√°lculos
        ii = sum(blend_lg.get(fa, 0) * valores_iodo.get(fa, 0) / 100 for fa in blend_lg)
        isap = sum(blend_lg.get(fa, 0) * valores_saponificacao.get(fa, 0) / 100 for fa in blend_lg)
        pfusao = sum(blend_lg.get(fa, 0) * valores_ponto_fusao.get(fa, 0) / 100 for fa in blend_lg)

        # Armazenamento no estado
        st.session_state["indice_iodo"] = ii
        st.session_state["indice_saponificacao"] = isap
        st.session_state["ponto_fusao"] = pfusao

        # Exibi√ß√£o
        st.metric("√çndice de Iodo", f"{ii:.2f}")
        st.metric("√çndice de Saponifica√ß√£o", f"{isap:.2f} mg KOH/g")
        st.metric("Ponto de Fus√£o Estimado", f"{pfusao:.2f} ¬∞C")

# === Assinatura Sensorial ===
with tabs[3]:
    oil_percentages = st.session_state.get("oil_percentages", {})
    oleos_utilizados = [oil for oil, pct in oil_percentages.items() if pct > 0]

    # Mapeamento entre nome completo e chave simplificada usada nos dicion√°rios
    nome_curto = {
    "PFAD (Destilado de √Åcidos Graxos de Palma)": "PFAD",
    "Soapstock de Palma (Refino Qu√≠mico)": "Soapstock",
    "Palm Oil": "Palm Oil",
    "Palm Olein": "Palm Olein",
    "Palm Stearin": "Palm Stearin",
    "Palm Kernel Oil": "Palm Kernel Oil",
    "Palm Kernel Olein": "Palm Kernel Olein",
    "Palm Kernel Stearin": "Palm Kernel Stearin",
    "√Åcido Oleico (C18:1)": "√Åcido Oleico",
    "√Åcido Linoleico (C18:2)": "√Åcido Linoleico",
    "√Åcido Palm√≠tico (C16:0)": "√Åcido Palm√≠tico",
    "√Åcido Este√°rico (C18:0)": "√Åcido Este√°rico",
    "√Åcido L√°urico (C12:0)": "√Åcido L√°urico",
    "√Åcido Mir√≠stico (C14:0)": "√Åcido Mir√≠stico",
    "√Åcido Capr√≥ico (C6:0)": "√Åcido Capr√≥ico",
    "√Åcido Capr√≠lico (C8:0)": "√Åcido Capr√≠lico"
}

    if not oleos_utilizados:
        st.warning("Monte seu blend com ao menos um √≥leo na aba 'üß™ Blend Lip√≠dico'.")
    else:
        st.subheader("üî¨ Compostos Vol√°teis Identificados")
        for oleo in oleos_utilizados:
            chave = nome_curto.get(oleo)
            compostos = perfils_volateis.get(chave, {})
            st.markdown(f"**{oleo}**:")
            for composto, (nota, pct) in compostos.items():
                st.markdown(f"- {composto}: {nota} ‚Äî {pct}%")
            st.markdown("---")

        st.subheader("üìö Refer√™ncias Cient√≠ficas")
        for oleo in oleos_utilizados:
            chave = nome_curto.get(oleo)
            ref = referencias.get(chave)
            if ref:
                st.markdown(f"**{oleo}:** {ref}")



# === Viabilidade T√©cnica ===
with tabs[4]:
    st.markdown("""
O modelo LipidPalma permite a cria√ß√£o de √≥leos estruturados por meio da esterifica√ß√£o enzim√°tica de √°cidos graxos,
oferecendo uma alternativa vi√°vel ao refino tradicional de √≥leos vegetais.

### üìâ Comparativo Econ√¥mico: LipidPalma vs. Modelo Tradicional

| Crit√©rio                           | LipidPalma (Esterifica√ß√£o Enzim√°tica) | Extra√ß√£o e Refino Tradicional      |
|-----------------------------------|------------------------------------------|-------------------------------------|
| **Mat√©ria-prima**                 | √Åcidos graxos puros + √°lcoois            | Frutos frescos de palma             |
| **Investimento inicial (CAPEX)** | M√©dio-alto (reatores + controle fino)    | Muito alto (plantio + usinas)       |
| **Custo operacional (OPEX)**      | Moderado (energia, enzima, reagentes)    | Alto (log√≠stica + manuten√ß√£o rural) |
| **Consist√™ncia do produto**       | Alta (ajust√°vel digitalmente)            | M√©dia (depende da safra e clima)    |
| **Escalabilidade**                | Alta em m√≥dulos industriais              | Alta, mas intensiva em terra        |
| **Sustentabilidade**              | Muito alta (sem uso de solo)             | Baixa (impacto ambiental elevado)   |
| **Custo estimado por kg**         | US$ 1,00-1,50                            | US$ 0,70-1,00                       |
| **Rendimento m√©dio**              | 85-95%                                   | 18-22% de √≥leo por fruto fresco     |
""")

# === üìä PROTOCOLO DE PRODU√á√ÉO ===
with tabs[5]:
    st.header("üìä Protocolo de Produ√ß√£o - Esterifica√ß√£o Enzim√°tica")

    if "blend_result" not in st.session_state:
        st.warning("Por favor, gere um blend lip√≠dico na aba 'üß™ Blend Lip√≠dico' antes de prosseguir.")
    else:
        blend = st.session_state["blend_result"]
        st.subheader("Composi√ß√£o Inicial do Blend (√Åcidos Graxos)")
        st.dataframe(pd.DataFrame.from_dict(blend, orient="index", columns=["%"]).style.format("{:.2f}"))

        st.markdown("---")
        st.subheader("Par√¢metros da Esterifica√ß√£o")

        col1, col2, col3 = st.columns(3)
        with col1:
            rendimento = st.slider("Rendimento da Rea√ß√£o (%)", 50, 100, 90)
        with col2:
            enzima_custo = st.number_input("Custo por kg de enzima imobilizada (R$/kg)", value=3000.0)
        with col3:
            ciclos_enzima = st.number_input("N√∫mero de usos da enzima", min_value=1, value=10)

        col4, col5, col6 = st.columns(3)
        with col4:
            enzima_pct = st.slider("% Enzima no processo (m/m)", 1, 10, 5)
        with col5:
            glicerol_pct = st.slider("% Glicerol no processo (m/m)", 5, 50, 15)
        with col6:
            custo_glicerol = st.number_input("Custo do glicerol (R$/kg)", value=5.0)

        st.markdown("---")
        st.subheader("Simula√ß√£o de Produ√ß√£o")

        massa_blend_kg = 1.0
        massa_glicerol = glicerol_pct / 100 * massa_blend_kg
        massa_enzima = enzima_pct / 100 * massa_blend_kg
        custo_enzima = (massa_enzima * enzima_custo) / ciclos_enzima
        custo_glicerol_total = massa_glicerol * custo_glicerol

        custo_mat_prima = custo_glicerol_total + custo_enzima
        custo_total = custo_mat_prima
        massa_final = massa_blend_kg * (rendimento / 100)

        custo_por_kg = custo_total / massa_final

        st.metric("Massa Final (kg)", f"{massa_final:.2f}")
        st.metric("Custo Total (R$)", f"{custo_total:.2f}")
        st.metric("Custo por kg (R$)", f"{custo_por_kg:.2f}")

        st.markdown("---")
        st.subheader("Comparativo da Composi√ß√£o")

        df_blend = pd.DataFrame.from_dict(blend, orient="index", columns=["Blend Original (%)"])
        df_blend["Esterificado (%)"] = df_blend["Blend Original (%)"] * (rendimento / 100)
        st.dataframe(df_blend.style.format("{:.2f}"))

        fig = px.bar(df_blend.reset_index(), x="index", y=["Blend Original (%)", "Esterificado (%)"],
                     barmode="group", labels={"index": "√Åcido Graxo"}, title="Compara√ß√£o: Antes e Depois da Esterifica√ß√£o")
        st.plotly_chart(fig, use_container_width=True)

# === ESG e Ambiental ===
with tabs[6]:

    st.markdown("""
    Esta se√ß√£o avalia o impacto ambiental e social do blend produzido via **esterifica√ß√£o enzim√°tica**, com base nos ingredientes selecionados na aba 'üß™ Blend Lip√≠dico' e nos par√¢metros definidos na aba 'üìä Protocolo de Produ√ß√£o'.
    """)

    oil_percentages = st.session_state.get("oil_percentages", {})
    ingredientes_utilizados = {k: v for k, v in oil_percentages.items() if v > 0}

    if not ingredientes_utilizados:
        st.warning("Monte seu blend com ao menos um ingrediente na aba 'üß™ Blend Lip√≠dico'.")
    else:
        st.subheader("üìå Ingredientes Utilizados")
        for ingrediente, pct in ingredientes_utilizados.items():
            st.markdown(f"- **{ingrediente}**: {pct:.1f}%")

        st.divider()
        st.subheader("‚ôªÔ∏è Avalia√ß√£o de Sustentabilidade")

        def impacto_individual(nome):
            nome = nome.lower()
            if "soapstock" in nome or "pfad" in nome:
                return "‚ôªÔ∏è Subproduto reaproveitado ‚Äî impacto positivo"
            elif "√°cido" in nome:
                return "‚öóÔ∏è √Åcido graxo puro ‚Äî impacto neutro (verificar origem)"
            elif "palm kernel" in nome or "kernel" in nome:
                return "üå¥ Derivado do palmiste ‚Äî aten√ß√£o √† rastreabilidade"
            elif "palm" in nome:
                return "üåø Fonte de palma convencional ‚Äî moderado"
            else:
                return "üß™ Insumo gen√©rico ‚Äî verificar fonte"

        for ingr in ingredientes_utilizados:
            st.markdown(f"- **{ingr}**: {impacto_individual(ingr)}")

        st.divider()
        st.subheader("üåç Benef√≠cios Ambientais Estimados")

        total = sum(ingredientes_utilizados.values())
        reaproveitados = sum(v for k, v in ingredientes_utilizados.items() if "Soapstock" in k or "PFAD" in k)
        reaproveitamento_pct = (reaproveitados / total) * 100

        col1, col2 = st.columns(2)
        col1.metric("üìâ Redu√ß√£o de Res√≠duo Industrial", f"{reaproveitamento_pct:.1f}%")
        col2.metric("‚öôÔ∏è Processo de Baixo Impacto", "Esterifica√ß√£o Enzim√°tica")

        st.markdown(
            """
        A utiliza√ß√£o de subprodutos como **PFAD** e **soapstock** permite reduzir significativamente o descarte e aumentar a circularidade da cadeia de produ√ß√£o.

        A s√≠ntese enzim√°tica ocorre a baixa temperatura, **reduzindo consumo energ√©tico e emiss√µes de CO2** comparado √† hidrogena√ß√£o ou transesterifica√ß√£o qu√≠mica.
            """
        )

        st.divider()
        st.subheader("üìò Narrativa ESG")

        st.markdown(
            """
        > **Este blend foi desenvolvido com foco em economia circular e impacto positivo.**  
        > A substitui√ß√£o de mat√©rias-primas tradicionais por subprodutos valorizados e a aplica√ß√£o de enzimas como catalisadores verdes demonstram o compromisso com solu√ß√µes sustent√°veis de alta performance.
            """
        )

        if st.button("üìÑ Gerar Relat√≥rio ESG"):
            st.info("üöß Em desenvolvimento: funcionalidade de exporta√ß√£o em PDF com logotipo, blend utilizado e descri√ß√£o do impacto.")

# === Rastreabilidade (Placeholder) ===
with tabs[7]:
    st.markdown("Esta se√ß√£o apresenta informa√ß√µes detalhadas sobre a origem, certifica√ß√µes e rastreabilidade dos ingredientes utilizados no blend final.")

    oil_percentages = st.session_state.get("oil_percentages", {})
    ingredientes_utilizados = {k: v for k, v in oil_percentages.items() if v > 0}

    if not ingredientes_utilizados:
        st.warning("Monte seu blend com ao menos um ingrediente na aba 'üß™ Blend Lip√≠dico'.")
    else:
        st.subheader("üì¶ Ingredientes do Blend")

        data_rastreabilidade = []
        for ingrediente, porcentagem in ingredientes_utilizados.items():
            with st.expander(f"{ingrediente} ‚Äî {porcentagem:.1f}%"):
                fornecedor = st.text_input(f"Fornecedor de {ingrediente}", key=f"fornecedor_{ingrediente}")
                lote = st.text_input(f"Lote de {ingrediente}", key=f"lote_{ingrediente}")
                origem = st.text_input(f"Pa√≠s de origem de {ingrediente}", key=f"origem_{ingrediente}")
                validade = st.date_input(f"Data de validade de {ingrediente}", key=f"validade_{ingrediente}")
                armazenamento = st.text_area(f"Condi√ß√µes de armazenamento de {ingrediente}", key=f"armazenamento_{ingrediente}", height=80)
                certificacoes = st.multiselect(
                    f"Certifica√ß√µes de {ingrediente}",
                    ["RSPO", "Org√¢nico", "Fair Trade", "Kosher", "Vegano"],
                    key=f"certificacoes_{ingrediente}"
                )
                data_rastreabilidade.append({
                    "Ingrediente": ingrediente,
                    "% no Blend": f"{porcentagem:.1f}%",
                    "Fornecedor": fornecedor,
                    "Lote": lote,
                    "Origem": origem,
                    "Validade": validade.strftime("%d/%m/%Y"),
                    "Armazenamento": armazenamento,
                    "Certifica√ß√µes": ", ".join(certificacoes) if certificacoes else "‚Äî"
                })

        st.divider()
        st.subheader("üìä Tabela Consolidada de Rastreabilidade")
        st.dataframe(data_rastreabilidade, use_container_width=True)

        st.divider()
        st.subheader("üìà Visualiza√ß√£o da Composi√ß√£o do Blend")
        df_grafico = pd.DataFrame({
            "Ingrediente": list(ingredientes_utilizados.keys()),
            "Propor√ß√£o (%)": list(ingredientes_utilizados.values())
        })
        fig = px.pie(df_grafico, names="Ingrediente", values="Propor√ß√£o (%)", hole=0.4,
                     color_discrete_sequence=px.colors.sequential.Agsunset)
        st.plotly_chart(fig, use_container_width=True)

        st.divider()
        st.success("‚úÖ Rastreabilidade registrada com sucesso! Pronta para exporta√ß√£o ou valida√ß√£o por auditoria externa.")

# === Exporta√ß√£o PDF ===
with tabs[8]:
    st.header("üìÑ Exportar Relat√≥rio PDF")
    
    if total_pct > 0:
        sensorial_txt = "Compostos Vol√°teis Identificados:\n"
        for oleo in oil_percentages:
            if oil_percentages[oleo] > 0:
                sensorial_txt += f"\n{oleo}:\n"
                for composto, (nota, pct) in perfils_volateis.get(oleo, {}).items():
                    sensorial_txt += f" - {composto}: {nota} ‚Äî {pct}%\n"

        sensorial_txt += "\nRefer√™ncias Cient√≠ficas:\n"
        for oleo in oil_percentages:
            if oil_percentages[oleo] > 0:
                ref = referencias.get(oleo)
                if ref:
                    sensorial_txt += f" - {oleo}: {ref}\n"

        pdf_buffer = gerar_pdf(df_lipidico, sensorial_txt)
        st.download_button(
            label="üì• Baixar Relat√≥rio PDF",
            data=pdf_buffer,
            file_name=f"relatorio_lipidgenesis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
            mime="application/pdf"
        )
    else:
        st.warning("Voc√™ precisa montar um blend com ao menos um √≥leo para gerar o relat√≥rio.")

# === Rodap√© ===
st.markdown("---")
st.markdown(
    "<p style='text-align: center; font-size: 14px;'>"
    "üåø Desenvolvido por <b>OGT - The Future of Oil Disruption</b>. "
    "Aplica√ß√£o modular <b>LipidGenesis</b> com o m√≥dulo atual: <b>LipidPalma</b>. "
    "<br>Vers√£o MVP demonstrativa. &copy; 2025 OGT."
    "</p>",
    unsafe_allow_html=True
)
